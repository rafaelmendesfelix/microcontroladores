Data: 12/05/2017

1. Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de 'x' milissegundos. Utilize o Timer_A para a contagem de 
tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões 
desta prova.
  
  Atraso(volatile unsigned int x){
    TA0CTL = ID_0 + TASSEL_2 + MC_1;
    TA0CCR0 = 1000-1;
    TA0CTL |= TACLR
    while(x>0){
    while((TA0CTL & TAIFG)==0);
    x--;
    TA0CTL &= ~TAIFG;
    }
   TA0CTL = MC_0;
}

2. Pisque os LEDs da Launchpad numa frequência de 100 Hz.

#include <msp430g2553.h>

  Atraso(volatile unsigned int x){
  
    while(x>0){
    while((TA0CTL & TAIFG)==0);
    x--;
    TA0CTL &= ~TAIFG;
    }
}

#define LED BIT0

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT = 0;
	P1DIR |= LED;
	TA0CCR0 = 1000-1;
	TA0CTL = TASSEL_2 + ID_0 + MC_1;
  
  while(1){
  Atraso(10);
  P1OUT ^= LED;
  }
	return 0;
}

3. Pisque os LEDs da Launchpad numa frequência de 20 Hz. 
  
  while(1){
  Atraso(50);
  P1OUT ^= LED;
  }
	return 0;
}

4. Pisque os LEDs da Launchpad numa frequência de 1 Hz.
 
  while(1){
  Atraso(1000);
  P1OUT ^= LED;
  }
	return 0;
}

5. Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

  while(1){
  Atraso(2000);
  P1OUT ^= LED;
  }
	return 0;
}

6. Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.

2)

#include <msp430.h> 

#define LED BIT0

int main(void)
{
    WDTCTL = WDTPW + WDTHOLD;   // Stop WDT

    BCSCTL1 = CALBC1_1MHZ;      //MCLK e SMCLK @ 1MHz
    DCOCTL = CALDCO_1MHZ;       //MCLK e SMCLK @ 1MHz
    P1OUT &= ~LED;
    P1DIR |= LED;
    TA0CCR0 = 10000-1; //10000-1;
    TA0CTL = TASSEL_2 + ID_0 + MC_1 + TAIE;
    _BIS_SR(LPM0_bits+GIE);
    return 0;
}

#pragma vector = TIMER0_A1_VECTOR
__interrupt void TA0_ISR(void)
{
    P1OUT ^= LED;
    TA0CTL &= ~TAIFG;
}

3) Igual a anterior, porém com TA0CCR0 = 50000-1; // dividir por 2!!!! 
4) Igual a anterior, porém com TA0CCR0 = 1000000-1;
5) Igual a anterior, porém com TA0CCR0 = 2000000-1;

7. Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. 
Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período 
de 1 ms entre os bits.
	
	P1DIR = 0;
	P2DIR |= BIT0;
	
	void paralelo_para_serial(void){
	P2OUT |= BIT0;
	Atraso(1);
	if(P1IN & BIT0) P2OUT |= BIT0;
	else P2OUT &= ~BIT0;
	}

8. Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa
com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos 
bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

9. Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o 
Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A,
que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos
para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.
