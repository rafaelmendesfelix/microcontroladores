Data: 31/03/2017

Para cada questão, escreva funções em C e/ou sub-rotinas na linguagem Assembly do MSP430. Reaproveite funções e sub-rotinas de uma
questão em outra, se assim desejar. Leve em consideração que as sub-rotinas são utilizadas em um código maior, portanto utilize 
adequadamente os registradores R4 a R11. As instruções da linguagem Assembly do MSP430 se encontram ao final deste texto.

1. (a) Escreva uma função em C que calcule a raiz quadrada 'x' de uma variável 'S' do tipo float, utilizando o seguinte algoritmo: 
após 'n+1' iterações, a raiz quadrada de 'S' é dada por

	x(n+1) = (x(n) + S/x(n))/2

O protótipo da função é:

	unsigned int Raiz_Quadrada(unsigned int S);
	
	float Raiz_Quadrada(float S){
	int n = 0;
	float x = S/2;

	while(n<10){
	x = (x + S/x)/2;
	n++;
	}
	return x;
	}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável 'S' é fornecida pelo registrador R15, e a raiz quadrada
de 'S' (ou seja, a variável 'x') é fornecida pelo registrador R15 também.
	
Raiz:     MOV R15,R14
          RRA R14
          CLR R11                        ; contador
Loop_Raiz:CMP #11,R11
          JGE End_Loop
          PUSH R15
          CALL #Div_Loop
          ADD R15,R14
          RRA R14
          INC R11
          POP R15
          JMP Loop_Raiz
End_Loop: MOV R14,R15
          RET

Div_Loop:       CLR R13
Loop_Div        CMP R14,R15
                JL END_Div
 		SUB R14,R15
 		INC R13
 		JMP Loop_Div             
END_Div:        MOV R13,R15
                RET

2. (a) Escreva uma função em C que calcule 'x' elevado à 'N'-ésima potência, seguindo o seguinte protótipo: 

int Potencia(int x, int N){
	int i=1;
	int result = x;

	if(N==0)
	return 1;
	else if(N==1)
    return x;
	else{
		while(i<N){
		result = Mult(result,x);
		i++;
		}
	 }
	 return result;
	}

int Mult(int a, int b){
    int mult=0;
    if(b==0)
    return 0;
    else{
        while(b>0){
        mult = mult + a;
        b--;
        }
    }
return mult;
}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. 'x' e 'n' são fornecidos através dos registradores R15 e R14, 
respectivamente, e a saída deverá ser fornecida no registrador R15.

Potencia:     MOV R14,R11               ;Contador i = R14
              MOV R15,R14
              CMP #0,R11
              JEQ End_Pot_1
Loop:         CMP #1,R11
              JEQ End_Pot_2
              CALL #Mult_Routine
              DEC R11
              JMP Loop
End_Pot_1:    MOV #1,R15
              RET              
End_Pot_2:    RET 
 
Mult_Routine: CLR.W R13
              MOV.W R14,R12
Mult_loop:    CMP #0,R12
              JEQ End_Mult
              ADD.W R15,R13
              DEC.W R12
              JMP Mult_loop
End_Mult:     MOV.W R13,R15
              RET

3. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula a divisão de 'a' por 'b', onde 'a', 'b' e o valor de saída são 
inteiros de 16 bits. 'a' e 'b' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida 
através do registrador R15.

Div_Loop:      CMP R14,R15
                JL END_Div
 		SUB R14,R15
 		INC R13
 		JMP Div_Loop              
 END_Div:       MOV R13,R15
                RET   

4. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o resto da divisão de 'a' por 'b', onde 'a', 'b' e o valor de saída
são inteiros de 16 bits. 'a' e 'b' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida 
através do registrador R15.

 Resto_Loop:    CMP R14,R15
                JL  END_Resto
 		SUB R14,R15
 		JMP Resto_Loop              
 END_Resto:     RET
               
                END

5. (a) Escreva uma função em C que indica a primalidade de uma variável inteira sem sinal, retornando o valor 1 se o número for primo, e 0, caso contrário. Siga o seguinte protótipo:

	int Primalidade(unsigned int x);
	
int Primalidade(unsigned int a){
int i = 1;
int cont = 0;
int resto;
while(i<=a){
    resto = Resto(a,i);
    if(resto==0){;
    cont++;}
    i++;
    }
  if(cont == 2)
    return 1;
  else
    return 0;
}
int Resto(int a, int b){
while(a>=b){
    a = a - b;
    }
return a;
}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

Primalidade: MOV #1,R14                 ; i = 1
             CLR R13                    ; contador de divisões cont = 0;
Loop:        CMP R14,R15                ; R15 <= i?
             JL End_Loop                ; Se R15<i, FIM se nao, CP++
             PUSH R15
             CALL #Resto_Loop
             CMP #0,R15                 ;Resto = 0?
             JNE Pula
             INC R13                    ; cont++  
Pula:        POP R15
             INC R14                    ;i++
             JMP Loop
End_Loop:    CMP #2,R13
             JEQ Primo
             MOV #0,R15
             RET
Primo:       MOV #1,R15   
             RET
 
Resto_Loop:   CMP R14,R15
              JL  END_Resto
              SUB R14,R15
              JMP Resto_Loop              
END_Resto:    RET

6. Escreva uma função em C que calcula o duplo fatorial de n, representado por n!!. Se n for ímpar, n!! = 1*3*5*...*n, e se n for
par, n!! = 2*4*6*...*n. Por exemplo, 9!! = 1*3*5*7*9 = 945 e 10!! = 2*4*6*8*10 = 3840. Além disso, 0!! = 1!! = 1.
O protótipo da função é:

	unsigned long long DuploFatorial(unsigned long long n);

unsigned long long int DuploFatorial(unsigned long long int n){

    if(n==0){
        return 1;
    }
int i=n-2;
int resto = Resto(n,2);

    if(resto == 0){
        while(i>1){
            n = Mult(n,i);
            i = i - 2;}
    }else{
        while(i>0){
            n = Mult(n,i);
            i = i - 2;
        }
    }
 return n;
}

int Mult(int a, int b){
    int mult=0;
    if(b==0)
    return 0;
    else{
        while(b>0){
        mult = mult + a;
        b--;
        }
    }
  return mult;
}

int Resto(int a, int b){
while(a>=b){
    a = a - b;
    }
return a;
}

7. (a) Escreva uma função em C que calcula a função exponencial da seguinte forma:
	
Considere o cálculo até o termo n = 20. O protótipo da função é double ExpTaylor(double x);

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430, mas considere que os valores de entrada e de saída são inteiros 
de 16 bits. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

8. Escreva uma sub-rotina na linguagem Assembly do MSP430 que indica se um vetor esta ordenado de forma decrescente. Por exemplo:
[5 4 3 2 1] e [90 23 20 10] estão ordenados de forma decrescente.
[1 2 3 4 5] e [1 2 3 2] não estão.
O primeiro endereço do vetor é fornecido pelo registrador R15, e o tamanho do vetor é fornecido pelo registrador R14. A saída deverá 
ser fornecida no registrador R15, valendo 1 quando o vetor estiver ordenado de forma decrescente, e valendo 0 em caso contrário.

Avalia_Ordem_Dec:       CLR.W R13          ;R13=i=0
Loop_Ordem:             MOV.W R13,R12
                        ADD.W #2,R12       ;R12=i+2=temporario
                        CMP R14,R13             
                        JGE Fim_Varredura
                        PUSH R13
                        ADD.W R15,R13
                        ADD.W R15,R12
                        CMP 0(R12),0(R13) ;vetor[i] < vetor[i+1]?
                        JL Desordem
                        POP R13
                        ADD #2,R13
                        JMP Loop_Ordem                        
Fim_Varredura:          MOV.W #1,R15             
                        RET
Desordem:               CLR.W R15
                        POP R13
                        RET
			
9. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o produto escalar de dois vetores, 'a' e 'b':
	
O primeiro endereço do vetor 'a' deverá ser passado através do registrador R15, o primeiro endereço do vetor 'b' deverá ser passado
através do registrador R14, e o tamanho do vetor deverá ser passado pelo registrador R13. A saída deverá ser fornecida no registrador 
R15.

Produto_Escalar:        CLR R12
                        CLR R11
Loop_Rotine:            CMP R12,R13
                        JL Fim
                        PUSH R15
                        PUSH R14
                        ADD R12,R15
                        ADD R12,R14
                        MOV 0(R15),R15
                        MOV 0(R14),R14
                        CALL #Mult_Rotine
                        ADD R15,R11                        
                        POP R14
                        POP R15
                        INCD R12
                        JMP Loop_Rotine
Fim:                    MOV R11,R15
                        RET

Mult_Rotine:            PUSH R13
                        PUSH R12
                        CLR.W R13
                        MOV.W R14,R12
Mult_loop:              CMP #0,R12
                        JEQ End_Mult
                        ADD.W R15,R13
                        DEC.W R12
                        JMP Mult_loop
End_Mult:               MOV.W R13,R15
                        POP R12
                        POP R13
                        RET

10. (a) Escreva uma função em C que indica se um vetor é palíndromo. Por exemplo:
	[1 2 3 2 1] e [0 10 20 20 10 0] são palíndromos.
	[5 4 3 2 1] e [1 2 3 2] não são.
Se o vetor for palíndromo, retorne o valor 1. Caso contrário, retorne o valor 0. O protótipo da função é:

	int Palindromo(int vetor[ ], int tamanho);

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. O endereço do vetor de entrada é dado pelo registrador R15, o tamanho do vetor é dado pelo registrador R14, e o resultado é dado pelo registrador R15.
