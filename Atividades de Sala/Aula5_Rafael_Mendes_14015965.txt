
Para as questões 2 a 5, considere que as variáveis 'f', 'g', 'h', 'i' e 'j' são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor 'A[]' é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores:
	f: R4
	g: R5
	h: R6
	i: R7
	j: R8
	A: R9
Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1. Escreva os trechos de código assembly do MSP430 para:
	(a) Somente setar o bit menos significativo de R5.
    bis.w #01h,R5;
	(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo.
    bis.w #03h,R6;
	(c) Somente zerar o terceiro bit menos significativo de R7.
    and.w #FBh,R7;
	(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.
    add.w 11110011b,R8;
	(e) Somente inverter o bit mais significativo de R9.
    xor.w #80h,R9;
	(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10. 
    xor.w #F0h,R10;
    bis.w #0Fh,R10
2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	if(i>j) f = g+h+10;
	else f = g-h-10;
  
    cmp R8,R7;
    jl OP_SUB
     mov R5,R4;
     sub.w R6,R4;
     sub.w #10,R4;
    jmp EXIT 
    OP_SUB:
      mov R5,R4;
      sub.w R6,R4;
      sub.w #10,R4;
     EXIT:
     
3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	while(save[i]!=k) i++;
	LOOP:
		move.w R7,R12;
		rla R12;
		add.w R9,R12;
		cmp 0(R12),R10;
		jeq EXIT;
		inc.w R7;
		jmp LOOP;
	EXIT:

4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=0; i<100; i++) A[i] = i*2;
	
	clr R7;
	LOOP:
		mov.w R7,R12;		/R7=i, R12 = temporario: R12 = i;
		rla R12;		/R12 = i*2;
		move.w R12,R13;		/R13 = i*2;
		add.w R9,R12;		/R9 = A, R12 = A + 2*i = &A[i];
		cmp #100,R7;		
		jge EXIT;
		move.w R13,0(R12);		/R12 = 2*i ou A[i] = 2*i;
		inc.w R7;		/R7 = R7+1 ou i = i+1
		jmp LOOP;
	EXIT:
	
5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=99; i>=0; i--) A[i] = i*2;
	
	mov.w #99,R7;
	LOOP:
		mov.w R7,R12;		/R7=i, R12 = temporario: R12 = i;
		rla R12;		/R12 = i*2;
		move.w R12,R13;		/R13 = i*2;
		add.w R9,R12;		/R9 = A, R12 = A + 2*i = A[i];
		cmp #0,R7;		
		jge ACTION;
		jmp EXIT;
	ACTION:	
		move.w R13,0(R12);		/R12 = 2*i ou A[i] = 2*i;
		dec.w R7;		/R7 = R7-1 ou i = i-1
		jmp LOOP;
	EXIT:
